-- 9. Write a PL/SQL block which accepts employee number and finds the average salary of the
-- employees working in the department where that employee works.
-- If his salary is more than the average salary of his department, then display message that
-- ‘employee’s salary is more than average salary’ else display ‘employee’s salary is less than
-- average salary’

select * from employ;
INSERT INTO employ (name, b_salary, HRA, DA, NET_SALARY, PF)
VALUES
  ('Sarah Johnson', 62000.00, 12400.00, 9300.00, 65100.00, 7440.00),
  ('Matthew Williams', 58000.00, 11600.00, 8700.00, 60900.00, 6960.00),
  ('Olivia Davis', 53000.00, 10600.00, 7950.00, 55650.00, 6360.00),
  ('Ethan Anderson', 72000.00, 14400.00, 10800.00, 75600.00, 8640.00),
  ('Ava Jackson', 55000.00, 11000.00, 8250.00, 57750.00, 6600.00);
  
  INSERT INTO employ (name, b_salary, HRA, DA, NET_SALARY, PF)
VALUES
  ('Noah Garcia', 61000.00, 12200.00, 9150.00, 64150.00, 7320.00),
  ('Mia Miller', 49000.00, 9800.00, 7350.00, 51450.00, 5880.00),
  ('Liam Martinez', 67000.00, 13400.00, 10050.00, 70500.00, 8040.00),
  ('Emma Johnson', 54000.00, 10800.00, 8100.00, 56700.00, 6480.00),
  ('James Wilson', 63000.00, 12600.00, 9450.00, 66150.00, 7560.00);

INSERT INTO employ (name, b_salary, HRA, DA, NET_SALARY, PF)
VALUES
  ('Oliver Smith', 59000.00, 11800.00, 8850.00, 61950.00, 7080.00),
  ('Isabella Davis', 52000.00, 10400.00, 7800.00, 54600.00, 6240.00),
  ('Benjamin Lee', 71000.00, 14200.00, 10650.00, 74700.00, 8520.00),
  ('Charlotte Wilson', 50000.00, 10000.00, 7500.00, 52500.00, 6000.00),
  ('Luna Johnson', 59000.00, 11800.00, 8850.00, 61950.00, 7080.00);

INSERT INTO employ (name, b_salary, HRA, DA, NET_SALARY, PF)
VALUES
  ('Logan Davis', 54000.00, 10800.00, 8100.00, 56700.00, 6480.00),
  ('Harper Smith', 64000.00, 12800.00, 9600.00, 67200.00, 7680.00),
  ('Elijah Johnson', 56000.00, 11200.00, 8400.00, 58800.00, 6720.00),
  ('Amelia Wilson', 59000.00, 11800.00, 8850.00, 61950.00, 7080.00),
  ('Mason Lee', 73000.00, 14600.00, 10950.00, 76650.00, 8760.00);
  
DELIMITER //
CREATE PROCEDURE find_avg_emp_and_store()
BEGIN
  DECLARE avg_Salary FLOAT;
  DECLARE emp_id INT;
  DECLARE emp_salary FLOAT;
  DECLARE emp_name VARCHAR(50);
  DECLARE emp_result_message VARCHAR(100);

  -- Create a temporary table to store the results
  CREATE TEMPORARY TABLE temp_results (
    employee_name VARCHAR(50),
    result_message VARCHAR(100)
  );

  -- Calculate the average salary
  SELECT AVG(b_salary) INTO avg_Salary FROM employ;

  -- Initialize the employee_id
  SET emp_id = 1;

  WHILE emp_id <= (SELECT MAX(ROWID) FROM employ) DO
    -- Fetch employee data based on ROWID
    SELECT name, b_salary INTO emp_name, emp_salary
    FROM employ
    WHERE ROWID = emp_id;

    IF emp_salary IS NULL THEN
      SET emp_result_message = 'This employee has no salary information';
    ELSE
      IF emp_salary = avg_Salary THEN
        SET emp_result_message = 'This employee has an average salary';
      ELSEIF emp_salary > avg_Salary THEN
        SET emp_result_message = 'This employee has more than the average salary';
      ELSE
        SET emp_result_message = 'This employee has less than the average salary';
      END IF;
    END IF;

    -- Insert the result into the temporary table
    INSERT INTO temp_results (employee_name, result_message)
    VALUES (emp_name, emp_result_message);

    -- Increment the employee_id
    SET emp_id = emp_id + 1;
  END WHILE;

  -- Select and display the results
  SELECT * FROM temp_results;

  -- Drop the temporary table when done
  DROP TEMPORARY TABLE temp_results;
END;
//
DELIMITER ;


drop procedure find_avg_emp_and_store;
call find_avg_emp_and_store();
select * from employ


-- ---------------------------------------------------------------------------------------------